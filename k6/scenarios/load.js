// k6 Load Test - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –ü–ö
import http from 'k6/http';
import { check, sleep } from 'k6';
import { Rate, Trend, Counter } from 'k6/metrics';

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
export let errorRate = new Rate('errors');
export let throughput = new Counter('requests_total');
export let processingLatency = new Trend('processing_latency');
export let messageSize = new Trend('message_size_bytes');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –ü–ö)
export let options = {
  stages: [
    { duration: '2m', target: 50 },    // –†–∞–∑–≥–æ–Ω –¥–æ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    { duration: '5m', target: 100 },   // –ù–∞–≥—Ä—É–∑–∫–∞ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    { duration: '5m', target: 200 },   // –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ 200 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    { duration: '2m', target: 100 },   // –°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ 100
    { duration: '2m', target: 0 },     // –ü–ª–∞–≤–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
  ],
  
  // –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
  thresholds: {
    http_req_duration: ['p(95)<100', 'p(99)<200'], // 95% < 100ms, 99% < 200ms
    http_req_failed: ['rate<0.05'],                 // –ú–µ–Ω–µ–µ 5% –æ—à–∏–±–æ–∫
    errors: ['rate<0.05'],                          // –ú–µ–Ω–µ–µ 5% –±–∏–∑–Ω–µ—Å-–æ—à–∏–±–æ–∫
    requests_total: ['rate>500'],                   // –ú–∏–Ω–∏–º—É–º 500 RPS
    processing_latency: ['p(95)<50'],               // 95% –æ–±—Ä–∞–±–æ—Ç–∫–∏ < 50ms
  },
  
  // HTTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  httpDebug: 'full', // –¢–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ
  insecureSkipTLSVerify: true,
  noConnectionReuse: false,
  
  // –†–µ—Å—É—Ä—Å—ã –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –ü–ö
  maxRedirects: 4,
  batch: 20,
  batchPerHost: 10,
};

const BASE_URL = __ENV.BASE_URL || 'http://localhost:8080';

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
function generateRealisticMessage() {
  const messageTypes = [
    { type: 'user_action', size: 'small' },
    { type: 'system_event', size: 'medium' },
    { type: 'analytics_batch', size: 'large' },
    { type: 'error_report', size: 'medium' },
    { type: 'metrics_update', size: 'small' },
  ];
  
  const msgType = messageTypes[Math.floor(Math.random() * messageTypes.length)];
  
  let data;
  switch (msgType.size) {
    case 'small':
      data = `{"event":"${msgType.type}","userId":${Math.floor(Math.random() * 10000)},"timestamp":"${new Date().toISOString()}"}`;
      break;
    case 'medium':
      data = JSON.stringify({
        event: msgType.type,
        userId: Math.floor(Math.random() * 10000),
        sessionId: `session_${__VU}_${__ITER}`,
        timestamp: new Date().toISOString(),
        properties: {
          browser: 'Chrome/91.0',
          platform: 'Linux',
          screen: '1920x1080',
          referrer: 'https://example.com',
          url: `/page/${Math.floor(Math.random() * 100)}`,
        }
      });
      break;
    case 'large':
      let events = [];
      for (let i = 0; i < 10; i++) {
        events.push({
          id: Math.floor(Math.random() * 100000),
          type: `event_${i}`,
          value: Math.random() * 1000,
          tags: [`tag_${i}`, `category_${Math.floor(i/3)}`]
        });
      }
      data = JSON.stringify({
        batchType: msgType.type,
        events: events,
        metadata: {
          batchId: `batch_${__VU}_${__ITER}`,
          source: 'analytics_collector',
          timestamp: new Date().toISOString(),
        }
      });
      break;
  }
  
  return {
    source: `load_test_${msgType.type}`,
    data: data,
    metadata: {
      testRun: __ENV.TEST_RUN_ID || 'load_test',
      virtualUser: __VU,
      iteration: __ITER,
      messageType: msgType.type,
      messageSize: msgType.size,
      timestamp: new Date().toISOString(),
    }
  };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
export default function() {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  let message = generateRealisticMessage();
  let payload = JSON.stringify(message);
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
  messageSize.add(payload.length);
  
  let params = {
    headers: {
      'Content-Type': 'application/json',
      'X-Test-Run': __ENV.TEST_RUN_ID || 'load_test',
      'X-Virtual-User': __VU.toString(),
    },
    timeout: '10s',
  };
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
  let start = Date.now();
  let response = http.post(`${BASE_URL}/api/v1/ingest`, payload, params);
  let processingTime = Date.now() - start;
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
  throughput.add(1);
  processingLatency.add(processingTime);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏
  let isSuccess = check(response, {
    'status is 200': (r) => r.status === 200,
    'has messageId': (r) => {
      try {
        let body = JSON.parse(r.body);
        return body.messageId && body.messageId.length > 0;
      } catch (e) {
        return false;
      }
    },
    'status is accepted': (r) => {
      try {
        let body = JSON.parse(r.body);
        return body.status === 'accepted';
      } catch (e) {
        return false;
      }
    },
    'response time acceptable': (r) => r.timings.duration < 500,
    'no error in response': (r) => !r.body.includes('error'),
  });
  
  errorRate.add(!isSuccess);
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã (–∫–∞–∂–¥—ã–µ 50 –∏—Ç–µ—Ä–∞—Ü–∏–π)
  if (__ITER % 50 === 0) {
    let statusResponse = http.get(`${BASE_URL}/api/v1/status`);
    check(statusResponse, {
      'system status available': (r) => r.status === 200,
      'ingest service healthy': (r) => {
        try {
          let body = JSON.parse(r.body);
          return body.ingest && body.ingest.healthy;
        } catch (e) {
          return false;
        }
      },
      'processor service healthy': (r) => {
        try {
          let body = JSON.parse(r.body);
          return body.processor && body.processor.healthy;
        } catch (e) {
          return false;
        }
      },
    });
  }
  
  // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
  let pauseDuration;
  if (message.metadata.messageType === 'user_action') {
    pauseDuration = Math.random() * 0.5; // 0-500ms –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  } else if (message.metadata.messageType === 'analytics_batch') {
    pauseDuration = Math.random() * 2; // 0-2s –¥–ª—è –±–∞—Ç—á–µ–π
  } else {
    pauseDuration = Math.random() * 1; // 0-1s –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
  }
  
  sleep(pauseDuration);
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
export function setup() {
  console.log('üöÄ Starting Load Test');
  console.log(`Target: ${BASE_URL}`);
  console.log(`Test Run ID: ${__ENV.TEST_RUN_ID || 'not_set'}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
  let healthCheck = http.get(`${BASE_URL}/health`);
  if (healthCheck.status !== 200) {
    throw new Error(`Service health check failed: ${healthCheck.status}`);
  }
  
  let statusCheck = http.get(`${BASE_URL}/api/v1/status`);
  if (statusCheck.status !== 200) {
    throw new Error(`Service status check failed: ${statusCheck.status}`);
  }
  
  console.log('‚úÖ Service is ready for load testing');
  
  // –ü—Ä–æ–≥—Ä–µ–≤ —Å–∏—Å—Ç–µ–º—ã
  console.log('üî• Warming up the system...');
  for (let i = 0; i < 10; i++) {
    let warmupMessage = generateRealisticMessage();
    http.post(`${BASE_URL}/api/v1/ingest`, JSON.stringify(warmupMessage), {
      headers: { 'Content-Type': 'application/json' }
    });
  }
  
  console.log('‚úÖ Warmup completed, starting load test...');
  return { 
    startTime: new Date(),
    testRunId: __ENV.TEST_RUN_ID || 'load_test'
  };
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
export function teardown(data) {
  console.log('üèÅ Load Test completed');
  console.log(`Test Run: ${data.testRunId}`);
  console.log(`Duration: ${new Date() - data.startTime}ms`);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  let finalStatus = http.get(`${BASE_URL}/api/v1/status`);
  if (finalStatus.status === 200) {
    try {
      let stats = JSON.parse(finalStatus.body);
      console.log('üìä Final System Statistics:');
      console.log(`  Ingest processed: ${stats.ingest?.stats?.TotalSent || 'N/A'}`);
      console.log(`  Processor handled: ${stats.processor?.stats?.pool?.ProcessedCount || 'N/A'}`);
      console.log(`  Queue size: ${stats.processor?.stats?.queue?.CurrentSize || 'N/A'}`);
    } catch (e) {
      console.log('Could not parse final statistics');
    }
  }
  
  console.log('üí° Analysis tips:');
  console.log('  - Check p95/p99 latencies in results');
  console.log('  - Monitor error rates and throughput');
  console.log('  - Review system resource usage');
} 