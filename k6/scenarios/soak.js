// k6 Soak Test - –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
import http from 'k6/http';
import { check, sleep } from 'k6';
import { Rate, Trend, Counter } from 'k6/metrics';

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è soak —Ç–µ—Å—Ç–∞
export let memoryLeakIndicator = new Trend('memory_leak_indicator');
export let performanceDegradation = new Trend('performance_degradation');
export let longRunErrors = new Rate('long_run_errors');
export let hourlyThroughput = new Counter('hourly_throughput');
export let systemHealth = new Rate('system_health_checks');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è soak —Ç–µ—Å—Ç–∞ (2 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 6 –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –ü–ö)
export let options = {
  stages: [
    { duration: '5m', target: 50 },      // –†–∞–∑–≥–æ–Ω –¥–æ —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    { duration: '110m', target: 50 },    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–∞–∑–∞: 110 –º–∏–Ω—É—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    { duration: '5m', target: 0 },       // –ü–ª–∞–≤–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
  ],
  
  // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
  thresholds: {
    http_req_duration: [
      'p(95)<150',              // 95% < 150ms –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ —Ç–µ—Å—Ç–∞
      'p(99)<300',              // 99% < 300ms
    ],
    http_req_failed: ['rate<0.02'],       // –ú–µ–Ω–µ–µ 2% –æ—à–∏–±–æ–∫
    long_run_errors: ['rate<0.02'],       // –ú–µ–Ω–µ–µ 2% –æ—à–∏–±–æ–∫ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    performance_degradation: ['p(95)<50'], // –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è < 50ms –≤ 95% —Å–ª—É—á–∞–µ–≤
    system_health_checks: ['rate>0.95'],   // 95% health checks —É—Å–ø–µ—à–Ω—ã
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
  maxRedirects: 4,
  batch: 20,
  batchPerHost: 10,
  discardResponseBodies: false, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
};

const BASE_URL = __ENV.BASE_URL || 'http://localhost:8080';

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è soak —Ç–µ—Å—Ç–∞ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
function generateSoakMessage() {
  const messagePatterns = [
    // –ü–∞—Ç—Ç–µ—Ä–Ω 1: –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    {
      source: 'user_session',
      data: JSON.stringify({
        action: 'page_view',
        userId: Math.floor(Math.random() * 5000),
        page: `/page/${Math.floor(Math.random() * 100)}`,
        timestamp: new Date().toISOString(),
      }),
      size: 'small'
    },
    // –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    {
      source: 'system_monitor',
      data: JSON.stringify({
        event: 'metric_update',
        metrics: {
          cpu: Math.random() * 100,
          memory: Math.random() * 100,
          disk: Math.random() * 100,
        },
        timestamp: new Date().toISOString(),
      }),
      size: 'medium'
    },
    // –ü–∞—Ç—Ç–µ—Ä–Ω 3: –ë–æ–ª—å—à–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è (—Ä–µ–∂–µ)
    {
      source: 'analytics_engine',
      data: JSON.stringify({
        batch_id: `batch_${Date.now()}`,
        events: Array.from({length: 20}, (_, i) => ({
          id: i,
          type: `event_${Math.floor(Math.random() * 10)}`,
          value: Math.random() * 1000,
        })),
        timestamp: new Date().toISOString(),
      }),
      size: 'large'
    }
  ];
  
  // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π: 60% small, 30% medium, 10% large
  let pattern;
  const rand = Math.random();
  if (rand < 0.6) {
    pattern = messagePatterns[0];
  } else if (rand < 0.9) {
    pattern = messagePatterns[1];
  } else {
    pattern = messagePatterns[2];
  }
  
  return {
    source: pattern.source,
    data: pattern.data,
    metadata: {
      testType: 'soak',
      hour: Math.floor(Date.now() / (1000 * 60 * 60)),
      messageSize: pattern.size,
      virtualUser: __VU,
      iteration: __ITER,
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
let baselineLatency = null;
let lastHourlyCheck = 0;

export default function() {
  const message = generateSoakMessage();
  const payload = JSON.stringify(message);
  const currentHour = Math.floor(Date.now() / (1000 * 60 * 60));
  
  const params = {
    headers: {
      'Content-Type': 'application/json',
      'X-Test-Type': 'soak',
      'X-Test-Hour': currentHour.toString(),
    },
    timeout: '15s',
  };
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const start = Date.now();
  const response = http.post(`${BASE_URL}/api/v1/ingest`, payload, params);
  const latency = Date.now() - start;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º baseline –≤ –ø–µ—Ä–≤—ã–µ 5 –º–∏–Ω—É—Ç
  if (!baselineLatency && __ITER < 50) {
    if (__ITER === 49) { // –ù–∞ 50-–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º baseline
      baselineLatency = latency;
      console.log(`üìä Baseline latency established: ${baselineLatency}ms`);
    }
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  if (baselineLatency) {
    const degradation = latency - baselineLatency;
    performanceDegradation.add(degradation);
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ (—Ä–∞—Å—Ç—É—â–∞—è latency)
    if (degradation > baselineLatency * 2) {
      memoryLeakIndicator.add(degradation);
    }
  }
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º throughput –ø–æ —á–∞—Å–∞–º
  hourlyThroughput.add(1);
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  const isSuccess = check(response, {
    'status is 200': (r) => r.status === 200,
    'has messageId': (r) => {
      try {
        const body = JSON.parse(r.body);
        return body.messageId && body.messageId.length > 0;
      } catch (e) {
        return false;
      }
    },
    'status is accepted': (r) => {
      try {
        const body = JSON.parse(r.body);
        return body.status === 'accepted';
      } catch (e) {
        return false;
      }
    },
    'latency not degraded severely': (r) => {
      if (!baselineLatency) return true;
      return r.timings.duration < baselineLatency * 5; // –ù–µ –±–æ–ª–µ–µ 5x –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
    },
  });
  
  longRunErrors.add(!isSuccess);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  if (currentHour !== lastHourlyCheck && __ITER % 100 === 0) {
    lastHourlyCheck = currentHour;
    
    const healthResponse = http.get(`${BASE_URL}/health`);
    const statusResponse = http.get(`${BASE_URL}/api/v1/status`);
    
    const healthCheck = check(healthResponse, {
      'health endpoint available': (r) => r.status === 200,
      'service reports healthy': (r) => {
        try {
          return JSON.parse(r.body).healthy === true;
        } catch (e) {
          return false;
        }
      },
    });
    
    const statusCheck = check(statusResponse, {
      'status endpoint available': (r) => r.status === 200,
      'services are healthy': (r) => {
        try {
          const body = JSON.parse(r.body);
          return body.ingest?.healthy && body.processor?.healthy;
        } catch (e) {
          return false;
        }
      },
    });
    
    systemHealth.add(healthCheck && statusCheck);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–π —á–∞—Å
    if (statusResponse.status === 200) {
      try {
        const stats = JSON.parse(statusResponse.body);
        console.log(`üïê Hour ${currentHour} system stats:`);
        console.log(`  Queue size: ${stats.processor?.stats?.queue?.CurrentSize || 'N/A'}`);
        console.log(`  Processed: ${stats.processor?.stats?.pool?.ProcessedCount || 'N/A'}`);
        console.log(`  Errors: ${stats.processor?.stats?.pool?.ErrorCount || 'N/A'}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏ (—Ä–∞—Å—Ç—É—â–∞—è –æ—á–µ—Ä–µ–¥—å)
        const queueSize = stats.processor?.stats?.queue?.CurrentSize || 0;
        if (queueSize > 1000) {
          console.log(`‚ö†Ô∏è Warning: Large queue size detected (${queueSize})`);
        }
      } catch (e) {
        console.log(`‚ùå Could not parse system stats for hour ${currentHour}`);
      }
    }
  }
  
  // –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
  const pauseVariation = Math.random();
  let sleepTime;
  
  if (pauseVariation < 0.1) {
    sleepTime = Math.random() * 5; // 10% –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–ª–∏–Ω–Ω–æ–π –ø–∞—É–∑–æ–π (0-5s)
  } else if (pauseVariation < 0.3) {
    sleepTime = Math.random() * 2; // 20% –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ —Å—Ä–µ–¥–Ω–µ–π –ø–∞—É–∑–æ–π (0-2s)
  } else {
    sleepTime = Math.random() * 1; // 70% –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞—É–∑–æ–π (0-1s)
  }
  
  sleep(sleepTime);
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è soak —Ç–µ—Å—Ç–∞
export function setup() {
  console.log('üïê Starting Soak Test (2 hours)');
  console.log(`Target: ${BASE_URL}`);
  console.log('Test phases:');
  console.log('  0-5min: Ramp up to 50 users');
  console.log('  5-115min: Steady load with 50 users');
  console.log('  115-120min: Ramp down');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
  const healthResponse = http.get(`${BASE_URL}/health`);
  if (healthResponse.status !== 200) {
    throw new Error(`Health check failed: ${healthResponse.status}`);
  }
  
  const statusResponse = http.get(`${BASE_URL}/api/v1/status`);
  if (statusResponse.status !== 200) {
    throw new Error(`Status check failed: ${statusResponse.status}`);
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  let initialStats = {};
  try {
    initialStats = JSON.parse(statusResponse.body);
    console.log('üìä Initial System State:');
    console.log(`  Queue size: ${initialStats.processor?.stats?.queue?.CurrentSize || 0}`);
    console.log(`  Processed: ${initialStats.processor?.stats?.pool?.ProcessedCount || 0}`);
    console.log(`  Memory indicators will be monitored for leaks`);
  } catch (e) {
    console.log('Could not parse initial statistics');
  }
  
  console.log('‚úÖ System ready for 2-hour soak test');
  console.log('üìã Monitoring:');
  console.log('  - Performance degradation over time');
  console.log('  - Memory leak indicators');
  console.log('  - Error rate stability');
  console.log('  - System health every hour');
  
  return {
    startTime: Date.now(),
    initialStats: initialStats,
    testDuration: '2 hours'
  };
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è soak —Ç–µ—Å—Ç–∞
export function teardown(data) {
  const testDuration = (Date.now() - data.startTime) / 1000 / 60; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  
  console.log('üèÅ Soak Test completed');
  console.log(`Actual duration: ${testDuration.toFixed(1)} minutes`);
  
  // –î–∞–µ–º —Å–∏—Å—Ç–µ–º–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  console.log('‚è≥ Allowing system to finish processing...');
  sleep(30);
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  const finalStatus = http.get(`${BASE_URL}/api/v1/status`);
  if (finalStatus.status === 200) {
    try {
      const finalStats = JSON.parse(finalStatus.body);
      const initialStats = data.initialStats;
      
      console.log('üìä Soak Test Analysis:');
      console.log('‚ïê'.repeat(60));
      
      // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const totalProcessed = (finalStats.processor?.stats?.pool?.ProcessedCount || 0) - 
                            (initialStats.processor?.stats?.pool?.ProcessedCount || 0);
      const totalErrors = (finalStats.processor?.stats?.pool?.ErrorCount || 0) - 
                         (initialStats.processor?.stats?.pool?.ErrorCount || 0);
      const finalQueueSize = finalStats.processor?.stats?.queue?.CurrentSize || 0;
      const initialQueueSize = initialStats.processor?.stats?.queue?.CurrentSize || 0;
      
      console.log(`  Messages processed: ${totalProcessed}`);
      console.log(`  Average throughput: ${(totalProcessed / (testDuration/60)).toFixed(1)} msg/hour`);
      console.log(`  Total errors: ${totalErrors}`);
      console.log(`  Error rate: ${totalProcessed > 0 ? (totalErrors / totalProcessed * 100).toFixed(3) : 0}%`);
      
      // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      console.log('\nüîç Stability Analysis:');
      console.log(`  Queue size change: ${initialQueueSize} ‚Üí ${finalQueueSize} (Œî${finalQueueSize - initialQueueSize})`);
      
      if (finalQueueSize <= initialQueueSize + 10) {
        console.log('‚úÖ Queue remained stable (no significant growth)');
      } else if (finalQueueSize <= initialQueueSize + 100) {
        console.log('‚ö†Ô∏è Minor queue growth detected (monitor for memory leaks)');
      } else {
        console.log('‚ùå Significant queue growth (potential memory leak or processing bottleneck)');
      }
      
      // –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      console.log('\nüéØ Soak Test Verdict:');
      const errorRate = totalProcessed > 0 ? (totalErrors / totalProcessed) : 0;
      const queueGrowth = finalQueueSize - initialQueueSize;
      
      if (errorRate < 0.02 && queueGrowth < 50) {
        console.log('üèÜ EXCELLENT: System demonstrated high stability over 2 hours');
      } else if (errorRate < 0.05 && queueGrowth < 200) {
        console.log('‚úÖ GOOD: System remained stable with minor issues');
      } else if (errorRate < 0.10 && queueGrowth < 500) {
        console.log('‚ö†Ô∏è CONCERNING: System showed stability issues, investigate further');
      } else {
        console.log('‚ùå POOR: System demonstrated instability, optimization required');
      }
      
    } catch (e) {
      console.log('‚ùå Could not analyze final statistics');
    }
  } else {
    console.log('‚ùå System not responding after soak test');
  }
  
  console.log('\nüìã Post-test recommendations:');
  console.log('  - Review memory usage trends');
  console.log('  - Check for any resource leaks');
  console.log('  - Analyze performance degradation patterns');
  console.log('  - Monitor system recovery time');
} 