// k6 Smoke Test - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
import http from 'k6/http';
import { check, sleep } from 'k6';
import { Rate, Trend } from 'k6/metrics';

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
export let errorRate = new Rate('errors');
export let processingTime = new Trend('processing_time');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
export let options = {
  stages: [
    { duration: '30s', target: 5 },   // –†–∞–∑–≥–æ–Ω –¥–æ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    { duration: '1m', target: 10 },   // –£–¥–µ—Ä–∂–∞–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    { duration: '30s', target: 0 },   // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
  ],
  thresholds: {
    http_req_duration: ['p(95)<100'], // 95% –∑–∞–ø—Ä–æ—Å–æ–≤ < 100ms
    http_req_failed: ['rate<0.01'],   // –ú–µ–Ω–µ–µ 1% –æ—à–∏–±–æ–∫
    errors: ['rate<0.01'],            // –ú–µ–Ω–µ–µ 1% –±–∏–∑–Ω–µ—Å-–æ—à–∏–±–æ–∫
  },
};

// –ë–∞–∑–æ–≤—ã–µ URL –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
const INGEST_URL = __ENV.INGEST_URL || 'http://localhost:8081';
const PROCESSOR_URL = __ENV.PROCESSOR_URL || 'http://localhost:8082';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function generateTestMessage() {
  const sources = ['web-app', 'mobile-app', 'api-client', 'batch-job'];
  const types = ['user-action', 'system-event', 'error-report', 'analytics'];
  
  return {
    source: sources[Math.floor(Math.random() * sources.length)],
    data: `Test data from VU ${__VU} iteration ${__ITER} at ${new Date().toISOString()}`,
    metadata: {
      type: types[Math.floor(Math.random() * types.length)],
      priority: Math.random() > 0.8 ? 'high' : 'normal',
      userId: `user_${Math.floor(Math.random() * 1000)}`,
      sessionId: `session_${__VU}_${__ITER}`,
      timestamp: new Date().toISOString(),
    }
  };
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
export default function() {
  // 1. Health Check –¥–ª—è Ingest —Å–µ—Ä–≤–∏—Å–∞
  let ingestHealthResponse = http.get(`${INGEST_URL}/health`);
  check(ingestHealthResponse, {
    'ingest health check status is 200': (r) => r.status === 200,
    'ingest health check has healthy flag': (r) => JSON.parse(r.body).healthy === true,
  });
  
  // 2. Health Check –¥–ª—è Processor —Å–µ—Ä–≤–∏—Å–∞
  let processorHealthResponse = http.get(`${PROCESSOR_URL}/health`);
  check(processorHealthResponse, {
    'processor health check status is 200': (r) => r.status === 200,
    'processor health check has healthy flag': (r) => JSON.parse(r.body).healthy === true,
  });
  
  // 3. Send Test Message
  let payload = JSON.stringify(generateTestMessage());
  let params = {
    headers: {
      'Content-Type': 'application/json',
    },
  };
  
  let start = Date.now();
  let ingestResponse = http.post(`${INGEST_URL}/ingest`, payload, params);
  let duration = Date.now() - start;
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  processingTime.add(duration);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
  let isSuccess = check(ingestResponse, {
    'ingest status is 200': (r) => r.status === 200,
    'ingest response has messageId': (r) => {
      try {
        let body = JSON.parse(r.body);
        return body.messageId !== undefined && body.messageId !== '';
      } catch (e) {
        return false;
      }
    },
    'ingest response has accepted status': (r) => {
      try {
        let body = JSON.parse(r.body);
        return body.status === 'accepted';
      } catch (e) {
        return false;
      }
    },
    'response time < 100ms': (r) => r.timings.duration < 100,
  });
  
  // –û—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫–∏
  errorRate.add(!isSuccess);
  
  // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  sleep(Math.random() * 2 + 1); // 1-3 —Å–µ–∫—É–Ω–¥—ã
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
export function setup() {
  console.log('üî• Starting Smoke Test');
  console.log(`Ingest Target: ${INGEST_URL}`);
  console.log(`Processor Target: ${PROCESSOR_URL}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
  let ingestResponse = http.get(`${INGEST_URL}/health`);
  if (ingestResponse.status !== 200) {
    throw new Error(`Ingest service is not available: ${ingestResponse.status}`);
  }
  
  let processorResponse = http.get(`${PROCESSOR_URL}/health`);
  if (processorResponse.status !== 200) {
    throw new Error(`Processor service is not available: ${processorResponse.status}`);
  }
  
  console.log('‚úÖ Services are available, starting test...');
  return { startTime: new Date() };
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞)
export function teardown(data) {
  console.log('üèÅ Smoke Test completed');
  console.log(`Started at: ${data.startTime}`);
  console.log(`Finished at: ${new Date()}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
  let ingestHealth = http.get(`${INGEST_URL}/health`);
  let processorHealth = http.get(`${PROCESSOR_URL}/health`);
  
  console.log('üìä Final services status:');
  console.log(`Ingest: ${ingestHealth.status === 200 ? 'Healthy' : 'Unhealthy'}`);
  console.log(`Processor: ${processorHealth.status === 200 ? 'Healthy' : 'Unhealthy'}`);
} 